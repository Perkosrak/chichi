{"version":3,"sources":["img/chichi.jpg","components/navbar/Navbar.js","components/main/balance/Balance.js","components/main/tabs/Tabs.js","components/main/charges/Charges.js","components/main/incomes/Incomes.js","components/main/button/Button.js","components/main/Main.js","components/categories/Categories.js","components/charts/Charts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","Logo","alt","to","activeClassName","Balance","props","value","Tabs","Charges","Incomes","Button","component","Link","Main","path","Categories","Charts","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,yPCyB5BC,EAnBA,WACX,OACI,yBAAKC,UAAY,UACb,yBAAKA,UAAU,eACX,yBAAKC,IAAKC,IAAMF,UAAY,cAAcG,IAAI,aAC9C,0BAAMH,UAAU,aAAhB,WAEJ,4BACI,wBAAIA,UAAU,eAAd,IAA6B,kBAAC,IAAD,CAASI,GAAG,QAAQC,gBAAgB,UAApC,WAC7B,wBAAIL,UAAU,eAAd,IAA6B,kBAAC,IAAD,CAASI,GAAG,cAAcC,gBAAgB,UAA1C,gBAC7B,wBAAIL,UAAU,eAAd,IAA6B,kBAAC,IAAD,CAASI,GAAG,UAAUC,gBAAgB,UAAtC,gBCC9BC,G,MAbC,SAACC,GACb,OACE,yBAAKP,UAAU,qBACb,uCACJ,yBAAKA,UAAU,UAAf,KAA2BO,EAAMC,UCctBC,G,MAjBF,WACT,OACI,yBAAKT,UAAY,aACb,4BACI,gCAAK,kBAAC,IAAD,CAASI,GAAG,WAAWC,gBAAgB,UAAvC,cACL,gCAAK,kBAAC,IAAD,CAASD,GAAG,WAAWC,gBAAgB,UAAvC,kBCINK,EAXC,WACZ,OACI,oCACR,wFACI,qCCOWC,EAXC,WACZ,OAEJ,yFCOeC,G,MATA,WACX,OACI,yBAAKZ,UAAU,mBACf,4BAAQa,UAAWC,IAAMV,GAAG,kBAA5B,e,OCyBOW,EAvBF,WACT,OACI,0CACI,kBAAC,EAAD,CAASP,MAAM,aACf,kBAAC,IAAD,KACJ,yBAAKR,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOgB,KAAK,WAAWH,UAAaH,IACpC,kBAAC,IAAD,CAAOM,KAAK,WAAWH,UAAaF,KAGtC,6BACA,kBAAC,EAAD,MACE,kBAAC,IAAD,CAAOK,KAAK,UAAUH,UAAaD,QCJ5BK,EAdI,WAEf,OACI,6BACI,sDACA,kECSGC,EAdA,WAEX,OACI,6BACI,kDACA,gE,MCcGC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOgB,KAAK,QAAQH,UAAaE,IACjC,kBAAC,IAAD,CAAOC,KAAK,cAAcH,UAAaI,IACvC,kBAAC,IAAD,CAAOD,KAAK,UAAUH,UAAaK,OCJvBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93b9cfec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chichi.4219124a.jpg\";","import React from 'react';\r\nimport Logo from '../../img/chichi.jpg';\r\nimport './navbar.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className = \"navbar\">\r\n            <div className=\"chichi-logo\">\r\n                <img src={Logo} className = \"navbar_logo\" alt=\"app_logo\"/>\r\n                <span className=\"name-logo\">CHICHI</span>\r\n            </div>\r\n            <ul>\r\n                <li className=\"navbar-item\"> <NavLink to=\"/main\" activeClassName=\"active\" > Home </NavLink></li>\r\n                <li className=\"navbar-item\"> <NavLink to=\"/categories\" activeClassName=\"active\" > Categores </NavLink></li>\r\n                <li className=\"navbar-item\"> <NavLink to=\"/charts\" activeClassName=\"active\"> Charts </NavLink></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './balance.css';\r\n\r\n\r\nconst Balance = (props) => {\r\n    return(\r\n      <div className=\"balance-container\">\r\n        <h3>Balance</h3>\r\n    <div className=\"amount\">$ {props.value}</div> \r\n      </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Balance;","import React from 'react';\r\nimport './tabs.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nconst Tabs = () => {\r\n    return(\r\n        <nav className = \"tab-items\">\r\n            <ul>\r\n                <li> <NavLink to=\"/charges\" activeClassName=\"active\" > Charges </NavLink></li>\r\n                <li> <NavLink to=\"/incomes\" activeClassName=\"active\" > Incomes </NavLink></li>\r\n                \r\n            </ul>\r\n        </nav>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Tabs;","import React from 'react';\r\n\r\n\r\nconst Charges = () => {\r\n    return(\r\n        <>\r\n<div>перший таб</div>\r\n    <p>Test</p>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Charges;","import React from 'react';\r\n\r\n\r\nconst Incomes = () => {\r\n    return(\r\n        \r\n<div>второй таб</div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Incomes;","import React from 'react';\r\nimport './button.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Button = () => {\r\n    return(\r\n        <div className=\"button-add-more\">\r\n        <button component={Link} to=\"/ButtonAddMore\">Add more</button>\r\n</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Button;","import React from 'react';\r\nimport Balance from './balance/Balance';\r\nimport Tabs from './tabs/Tabs';\r\nimport Charges from './charges/Charges';\r\nimport Incomes from './incomes/Incomes';\r\nimport Button from './button/Button';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\n\r\n\r\nconst Main = () => {\r\n    return(\r\n        <div>Main page.\r\n            <Balance value=\"2,652.07\"/>\r\n            <BrowserRouter>\r\n        <div className=\"tab-items\">\r\n        <Tabs/>\r\n        <Route path=\"/charges\" component = {Charges}/>\r\n        <Route path=\"/incomes\" component = {Incomes}/>  \r\n        \r\n      </div>\r\n      <div>\r\n      <Button/>\r\n        <Route path=\"/button\" component = {Button}/>\r\n        </div>\r\n    </BrowserRouter>\r\n     </div>\r\n        \r\n      \r\n    )\r\n}\r\n\r\n\r\nexport default Main;","import React from 'react';\r\n\r\n\r\n\r\nconst Categories = () => {\r\n\r\n    return(\r\n        <div>\r\n            <h1>It's a Categories Page</h1>\r\n            <p>Categories of Cats and Dogs here!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Categories;","import React from 'react';\r\n\r\n\r\n\r\nconst Charts = () => {\r\n\r\n    return(\r\n        <div>\r\n            <h1>It's a Charts Page</h1>\r\n            <p>Diagrams of Cats and Dogs here!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Charts;","import React from 'react';\r\nimport Navbar from './components/navbar/Navbar';\r\nimport Main from './components/main/Main';\r\nimport Categories from './components/categories/Categories';\r\nimport Charts from './components/charts/Charts';\r\nimport './app.css';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"app_wrapper\">\r\n        <Navbar/>\r\n        <Route path=\"/main\" component = {Main}/>\r\n        <Route path=\"/categories\" component = {Categories}/>  \r\n        <Route path=\"/charts\" component = {Charts}/> \r\n      </div>\r\n      \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}